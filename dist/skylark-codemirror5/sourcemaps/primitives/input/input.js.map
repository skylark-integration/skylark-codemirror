{"version":3,"sources":["primitives/input/input.js"],"names":["define","a","b","c","d","e","f","g","h","i","j","k","lastCopied","applyTextInput","cm","inserted","deleted","sel","origin","doc","display","shift","recent","Date","paste","state","pasteIncoming","textLines","splitLinesAuto","multiPaste","ranges","length","text","join","push","splitLines","options","pasteLinesPerSelection","map","l","updateInput","curOp","range","from","to","empty","Pos","line","ch","overwrite","Math","min","getLine","lst","lineWise","changeEvent","cutIncoming","makeChange","signalLater","triggerElectric","ensureCursorVisible","typing","electricChars","smartIndent","head","mode","getModeAt","indented","indexOf","charAt","indentLine","electricInput","test","slice","disableBrowserMagic","field","spellcheck","autocorrect","autocapitalize","setAttribute","setLastCopied","newLastCopied","handlePaste","pasted","clipboardData","getData","preventDefault","isReadOnly","disableInput","runInOp","copyableRanges","lineRange","anchor","getRange","hiddenTextarea","te","elt","div","webkit","style","width","ios","border"],"mappings":"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","file":"../../../primitives/input/input.js","sourcesContent":["define([\n    '../display/operations',\n    '../display/scrolling',\n    '../line/pos',\n    '../line/utils_line',\n    '../model/changes',\n    '../util/browser',\n    '../util/dom',\n    '../util/misc',\n    '../util/operation_group',\n    '../util/feature_detection',\n    './indent'\n], function (a, b, c, d, e, f, g, h, i, j, k) {\n    'use strict';\n    let lastCopied = null;\n    function setLastCopied(newLastCopied) {\n        lastCopied = newLastCopied;\n    }\n    function applyTextInput(cm, inserted, deleted, sel, origin) {\n        let doc = cm.doc;\n        cm.display.shift = false;\n        if (!sel)\n            sel = doc.sel;\n        let recent = +new Date() - 200;\n        let paste = origin == 'paste' || cm.state.pasteIncoming > recent;\n        let textLines = j.splitLinesAuto(inserted), multiPaste = null;\n        if (paste && sel.ranges.length > 1) {\n            if (lastCopied && lastCopied.text.join('\\n') == inserted) {\n                if (sel.ranges.length % lastCopied.text.length == 0) {\n                    multiPaste = [];\n                    for (let i = 0; i < lastCopied.text.length; i++)\n                        multiPaste.push(doc.splitLines(lastCopied.text[i]));\n                }\n            } else if (textLines.length == sel.ranges.length && cm.options.pasteLinesPerSelection) {\n                multiPaste = h.map(textLines, l => [l]);\n            }\n        }\n        let updateInput = cm.curOp.updateInput;\n        for (let i = sel.ranges.length - 1; i >= 0; i--) {\n            let range = sel.ranges[i];\n            let from = range.from(), to = range.to();\n            if (range.empty()) {\n                if (deleted && deleted > 0)\n                    from = c.Pos(from.line, from.ch - deleted);\n                else if (cm.state.overwrite && !paste)\n                    to = c.Pos(to.line, Math.min(d.getLine(doc, to.line).text.length, to.ch + h.lst(textLines).length));\n                else if (paste && lastCopied && lastCopied.lineWise && lastCopied.text.join('\\n') == inserted)\n                    from = to = c.Pos(from.line, 0);\n            }\n            let changeEvent = {\n                from: from,\n                to: to,\n                text: multiPaste ? multiPaste[i % multiPaste.length] : textLines,\n                origin: origin || (paste ? 'paste' : cm.state.cutIncoming > recent ? 'cut' : '+input')\n            };\n            e.makeChange(cm.doc, changeEvent);\n            i.signalLater(cm, 'inputRead', cm, changeEvent);\n        }\n        if (inserted && !paste)\n            triggerElectric(cm, inserted);\n        b.ensureCursorVisible(cm);\n        if (cm.curOp.updateInput < 2)\n            cm.curOp.updateInput = updateInput;\n        cm.curOp.typing = true;\n        cm.state.pasteIncoming = cm.state.cutIncoming = -1;\n    }\n    function handlePaste(e, cm) {\n        let pasted = e.clipboardData && e.clipboardData.getData('Text');\n        if (pasted) {\n            e.preventDefault();\n            if (!cm.isReadOnly() && !cm.options.disableInput)\n                a.runInOp(cm, () => applyTextInput(cm, pasted, 0, null, 'paste'));\n            return true;\n        }\n    }\n    function triggerElectric(cm, inserted) {\n        if (!cm.options.electricChars || !cm.options.smartIndent)\n            return;\n        let sel = cm.doc.sel;\n        for (let i = sel.ranges.length - 1; i >= 0; i--) {\n            let range = sel.ranges[i];\n            if (range.head.ch > 100 || i && sel.ranges[i - 1].head.line == range.head.line)\n                continue;\n            let mode = cm.getModeAt(range.head);\n            let indented = false;\n            if (mode.electricChars) {\n                for (let j = 0; j < mode.electricChars.length; j++)\n                    if (inserted.indexOf(mode.electricChars.charAt(j)) > -1) {\n                        indented = k.indentLine(cm, range.head.line, 'smart');\n                        break;\n                    }\n            } else if (mode.electricInput) {\n                if (mode.electricInput.test(d.getLine(cm.doc, range.head.line).text.slice(0, range.head.ch)))\n                    indented = k.indentLine(cm, range.head.line, 'smart');\n            }\n            if (indented)\n                i.signalLater(cm, 'electricInput', cm, range.head.line);\n        }\n    }\n    function copyableRanges(cm) {\n        let text = [], ranges = [];\n        for (let i = 0; i < cm.doc.sel.ranges.length; i++) {\n            let line = cm.doc.sel.ranges[i].head.line;\n            let lineRange = {\n                anchor: c.Pos(line, 0),\n                head: c.Pos(line + 1, 0)\n            };\n            ranges.push(lineRange);\n            text.push(cm.getRange(lineRange.anchor, lineRange.head));\n        }\n        return {\n            text: text,\n            ranges: ranges\n        };\n    }\n    function disableBrowserMagic(field, spellcheck, autocorrect, autocapitalize) {\n        field.setAttribute('autocorrect', !!autocorrect);\n        field.setAttribute('autocapitalize', !!autocapitalize);\n        field.setAttribute('spellcheck', !!spellcheck);\n    }\n    function hiddenTextarea() {\n        let te = g.elt('textarea', null, null, 'position: absolute; bottom: -1em; padding: 0; width: 1px; height: 1em; outline: none');\n        let div = g.elt('div', [te], null, 'overflow: hidden; position: relative; width: 3px; height: 0px;');\n        if (f.webkit)\n            te.style.width = '1000px';\n        else\n            te.setAttribute('wrap', 'off');\n        if (f.ios)\n            te.style.border = '1px solid black';\n        disableBrowserMagic(te);\n        return div;\n    }\n    return {\n        lastCopied: lastCopied,\n        setLastCopied: setLastCopied,\n        applyTextInput: applyTextInput,\n        handlePaste: handlePaste,\n        triggerElectric: triggerElectric,\n        copyableRanges: copyableRanges,\n        disableBrowserMagic: disableBrowserMagic,\n        hiddenTextarea: hiddenTextarea\n    };\n});"]}