{"version":3,"sources":["primitives/display/update_display.js"],"names":["define","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","DisplayUpdate","[object Object]","cm","viewport","force","display","this","visible","visibleLines","doc","editorIsHidden","wrapper","offsetWidth","wrapperHeight","clientHeight","wrapperWidth","clientWidth","oldDisplayWidth","displayWidth","dims","getDimensions","events","emitter","type","hasHandler","push","arguments","length","signal","apply","updateDisplayIfNeeded","update","resetView","from","viewFrom","to","viewTo","updateLineNumbers","renderedView","view","countDirtyView","maybeUpdateLineNumberWidth","end","first","size","Math","max","options","viewportMargin","min","sawCollapsedSpans","visualLineNo","visualLineEndNo","different","lastWrapHeight","lastWrapWidth","adjustView","viewOffset","heightAtLine","getLine","mover","style","top","toUpdate","selSnapshot","hasFocus","active","activeElt","contains","lineDiv","result","window","getSelection","sel","anchorNode","extend","anchorOffset","focusNode","focusOffset","selectionSnapshot","updateNumbersFrom","lineNumbers","container","cur","firstChild","rm","node","next","nextSibling","webkit","mac","currentWheelTarget","parentNode","removeChild","lineN","lineView","hidden","updateNumber","lineNumber","changes","indexOf","updateLineForChanges","removeChildren","appendChild","document","createTextNode","lineNumberFor","buildLineElement","insertBefore","patchDisplay","snapshot","focus","body","range","createRange","setEnd","collapse","removeAllRanges","addRange","restoreSelection","cursorDiv","selectionDiv","gutters","height","sizer","minHeight","startWorker","postUpdateDisplay","lineWrapping","paddingVert","displayHeight","updateHeightsInViewport","barMeasure","measureForScrollbars","updateSelection","updateScrollbars","setDocumentHeight","reportedViewFrom","reportedViewTo","measure","docHeight","heightForcer","barHeight","scrollGap","maybeClipScrollbars","scrollbarsClipped","scroller","nativeBarWidth","marginBottom","borderRightWidth","updateDisplaySimple","finish","updateGutterSpace","width","marginLeft"],"mappings":";;;;;;;AAAAA,QACI,4BACA,gBACA,qBACA,sCACA,kBACA,cACA,gBACA,eACA,gBACA,qBACA,iBACA,eACA,cACA,iBACA,mBACD,SAAUC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,GACnD,mBACMC,EACFC,YAAYC,EAAIC,EAAUC,GACtB,IAAIC,EAAUH,EAAGG,QACjBC,KAAKH,SAAWA,EAChBG,KAAKC,QAAUT,EAAEU,aAAaH,EAASH,EAAGO,IAAKN,GAC/CG,KAAKI,gBAAkBL,EAAQM,QAAQC,YACvCN,KAAKO,cAAgBR,EAAQM,QAAQG,aACrCR,KAAKS,aAAeV,EAAQM,QAAQK,YACpCV,KAAKW,gBAAkB7B,EAAE8B,aAAahB,GACtCI,KAAKF,MAAQA,EACbE,KAAKa,KAAO/B,EAAEgC,cAAclB,GAC5BI,KAAKe,UAETpB,OAAOqB,EAASC,GACRhC,EAAEiC,WAAWF,EAASC,IACtBjB,KAAKe,OAAOI,KAAKC,WAEzBzB,SACI,IAAK,IAAIR,EAAI,EAAGA,EAAIa,KAAKe,OAAOM,OAAQlC,IACpCF,EAAEqC,OAAOC,MAAM,KAAMvB,KAAKe,OAAO5B,KA4C7C,SAASqC,EAAsB5B,EAAI6B,GAC/B,IAAI1B,EAAUH,EAAGG,QAASI,EAAMP,EAAGO,IACnC,GAAIsB,EAAOrB,eAEP,OADAX,EAAEiC,UAAU9B,IACL,EAEX,IAAK6B,EAAO3B,OAAS2B,EAAOxB,QAAQ0B,MAAQ5B,EAAQ6B,UAAYH,EAAOxB,QAAQ4B,IAAM9B,EAAQ+B,SAAwC,MAA7B/B,EAAQgC,mBAA6BhC,EAAQgC,mBAAqBhC,EAAQ+B,SAAW/B,EAAQiC,cAAgBjC,EAAQkC,MAAgC,GAAxBxC,EAAEyC,eAAetC,GAClP,OAAO,EACPP,EAAE8C,2BAA2BvC,KAC7BH,EAAEiC,UAAU9B,GACZ6B,EAAOZ,KAAO/B,EAAEgC,cAAclB,IAElC,IAAIwC,EAAMjC,EAAIkC,MAAQlC,EAAImC,KACtBX,EAAOY,KAAKC,IAAIf,EAAOxB,QAAQ0B,KAAO/B,EAAG6C,QAAQC,eAAgBvC,EAAIkC,OACrER,EAAKU,KAAKI,IAAIP,EAAKX,EAAOxB,QAAQ4B,GAAKjC,EAAG6C,QAAQC,gBAClD3C,EAAQ6B,SAAWD,GAAQA,EAAO5B,EAAQ6B,SAAW,KACrDD,EAAOY,KAAKC,IAAIrC,EAAIkC,MAAOtC,EAAQ6B,WACnC7B,EAAQ+B,OAASD,GAAM9B,EAAQ+B,OAASD,EAAK,KAC7CA,EAAKU,KAAKI,IAAIP,EAAKrC,EAAQ+B,SAC3BnD,EAAEiE,oBACFjB,EAAO/C,EAAEiE,aAAajD,EAAGO,IAAKwB,GAC9BE,EAAKjD,EAAEkE,gBAAgBlD,EAAGO,IAAK0B,IAEnC,IAAIkB,EAAYpB,GAAQ5B,EAAQ6B,UAAYC,GAAM9B,EAAQ+B,QAAU/B,EAAQiD,gBAAkBvB,EAAOlB,eAAiBR,EAAQkD,eAAiBxB,EAAOhB,aACtJhB,EAAEyD,WAAWtD,EAAI+B,EAAME,GACvB9B,EAAQoD,WAAavE,EAAEwE,aAAavE,EAAEwE,QAAQzD,EAAGO,IAAKJ,EAAQ6B,WAC9DhC,EAAGG,QAAQuD,MAAMC,MAAMC,IAAMzD,EAAQoD,WAAa,KAClD,IAAIM,EAAWhE,EAAEyC,eAAetC,GAChC,IAAKmD,GAAyB,GAAZU,IAAkBhC,EAAO3B,OAASC,EAAQiC,cAAgBjC,EAAQkC,OAAsC,MAA7BlC,EAAQgC,mBAA6BhC,EAAQgC,mBAAqBhC,EAAQ+B,QACnK,OAAO,EACX,IAAI4B,EA7DR,SAA2B9D,GACvB,GAAIA,EAAG+D,WACH,OAAO,KACX,IAAIC,EAAS5E,EAAE6E,YACf,IAAKD,IAAW5E,EAAE8E,SAASlE,EAAGG,QAAQgE,QAASH,GAC3C,OAAO,KACX,IAAII,GAAWH,UAAWD,GAC1B,GAAIK,OAAOC,aAAc,CACrB,IAAIC,EAAMF,OAAOC,eACbC,EAAIC,YAAcD,EAAIE,QAAUrF,EAAE8E,SAASlE,EAAGG,QAAQgE,QAASI,EAAIC,cACnEJ,EAAOI,WAAaD,EAAIC,WACxBJ,EAAOM,aAAeH,EAAIG,aAC1BN,EAAOO,UAAYJ,EAAII,UACvBP,EAAOQ,YAAcL,EAAIK,aAGjC,OAAOR,EA6CWS,CAAkB7E,GAiBpC,OAhBI6D,EAAW,IACX1D,EAAQgE,QAAQR,MAAMxD,QAAU,QAuDxC,SAAsBH,EAAI8E,EAAmB7D,GACzC,IAAId,EAAUH,EAAGG,QAAS4E,EAAc/E,EAAG6C,QAAQkC,YAC/CC,EAAY7E,EAAQgE,QAASc,EAAMD,EAAUE,WACjD,SAASC,EAAGC,GACR,IAAIC,EAAOD,EAAKE,YAKhB,OAJInG,EAAEoG,QAAUpG,EAAEqG,KAAOxF,EAAGG,QAAQsF,oBAAsBL,EACtDA,EAAKzB,MAAMxD,QAAU,OAErBiF,EAAKM,WAAWC,YAAYP,GACzBC,EAEX,IAAIhD,EAAOlC,EAAQkC,KAAMuD,EAAQzF,EAAQ6B,SACzC,IAAK,IAAIzC,EAAI,EAAGA,EAAI8C,EAAKZ,OAAQlC,IAAK,CAClC,IAAIsG,EAAWxD,EAAK9C,GACpB,GAAIsG,EAASC,aACN,GAAKD,EAAST,MAAQS,EAAST,KAAKM,YAAcV,EAGlD,CACH,KAAOC,GAAOY,EAAST,MACnBH,EAAME,EAAGF,GACb,IAAIc,EAAehB,GAAoC,MAArBD,GAA6BA,GAAqBc,GAASC,EAASG,WAClGH,EAASI,UACL3G,EAAE4G,QAAQL,EAASI,QAAS,WAAa,IACzCF,GAAe,GACnBxG,EAAE4G,qBAAqBnG,EAAI6F,EAAUD,EAAO3E,IAE5C8E,IACA3G,EAAEgH,eAAeP,EAASG,YAC1BH,EAASG,WAAWK,YAAYC,SAASC,eAAetH,EAAEuH,cAAcxG,EAAG6C,QAAS+C,MAExFX,EAAMY,EAAST,KAAKE,gBAhB4C,CAChE,IAAIF,EAAO7F,EAAEkH,iBAAiBzG,EAAI6F,EAAUD,EAAO3E,GACnD+D,EAAU0B,aAAatB,EAAMH,GAgBjCW,GAASC,EAASnD,KAEtB,KAAOuC,GACHA,EAAME,EAAGF,GA1Fb0B,CAAa3G,EAAIG,EAAQgC,kBAAmBN,EAAOZ,MAC/C4C,EAAW,IACX1D,EAAQgE,QAAQR,MAAMxD,QAAU,IACpCA,EAAQiC,aAAejC,EAAQkC,KAjDnC,SAA0BuE,GACtB,GAAKA,GAAaA,EAAS3C,WAAa2C,EAAS3C,WAAa7E,EAAE6E,cAEhE2C,EAAS3C,UAAU4C,QACfD,EAASpC,YAAcpF,EAAE8E,SAASoC,SAASQ,KAAMF,EAASpC,aAAepF,EAAE8E,SAASoC,SAASQ,KAAMF,EAASjC,YAAY,CACxH,IAAIJ,EAAMF,OAAOC,eAAgByC,EAAQT,SAASU,cAClDD,EAAME,OAAOL,EAASpC,WAAYoC,EAASlC,cAC3CqC,EAAMG,UAAS,GACf3C,EAAI4C,kBACJ5C,EAAI6C,SAASL,GACbxC,EAAIE,OAAOmC,EAASjC,UAAWiC,EAAShC,cAwC5CyC,CAAiBvD,GACjB1E,EAAEgH,eAAejG,EAAQmH,WACzBlI,EAAEgH,eAAejG,EAAQoH,cACzBpH,EAAQqH,QAAQ7D,MAAM8D,OAAStH,EAAQuH,MAAM/D,MAAMgE,UAAY,EAC3DxE,IACAhD,EAAQiD,eAAiBvB,EAAOlB,cAChCR,EAAQkD,cAAgBxB,EAAOhB,aAC/BrB,EAAEoI,YAAY5H,EAAI,MAEtBG,EAAQgC,kBAAoB,MACrB,EAEX,SAAS0F,EAAkB7H,EAAI6B,GAC3B,IAAI5B,EAAW4B,EAAO5B,SACtB,IAAK,IAAIwC,GAAQ,GACRA,GAAUzC,EAAG6C,QAAQiF,cAAgBjG,EAAOd,iBAAmB7B,EAAE8B,aAAahB,KAC3EC,GAA4B,MAAhBA,EAAS2D,MACrB3D,GAAa2D,IAAKjB,KAAKI,IAAI/C,EAAGO,IAAIkH,OAASvI,EAAE6I,YAAY/H,EAAGG,SAAWjB,EAAE8I,cAAchI,GAAKC,EAAS2D,OACzG/B,EAAOxB,QAAUT,EAAEU,aAAaN,EAAGG,QAASH,EAAGO,IAAKN,KAChD4B,EAAOxB,QAAQ0B,MAAQ/B,EAAGG,QAAQ6B,UAAYH,EAAOxB,QAAQ4B,IAAMjC,EAAGG,QAAQ+B,WAGjFN,EAAsB5B,EAAI6B,GARXY,GAAQ,EAAO,CAUnC7C,EAAEqI,wBAAwBjI,GAC1B,IAAIkI,EAAaxI,EAAEyI,qBAAqBnI,GACxCL,EAAEyI,gBAAgBpI,GAClBN,EAAE2I,iBAAiBrI,EAAIkI,GACvBI,EAAkBtI,EAAIkI,GACtBrG,EAAO3B,OAAQ,EAEnB2B,EAAOH,OAAO1B,EAAI,SAAUA,GACxBA,EAAGG,QAAQ6B,UAAYhC,EAAGG,QAAQoI,kBAAoBvI,EAAGG,QAAQ+B,QAAUlC,EAAGG,QAAQqI,iBACtF3G,EAAOH,OAAO1B,EAAI,iBAAkBA,EAAIA,EAAGG,QAAQ6B,SAAUhC,EAAGG,QAAQ+B,QACxElC,EAAGG,QAAQoI,iBAAmBvI,EAAGG,QAAQ6B,SACzChC,EAAGG,QAAQqI,eAAiBxI,EAAGG,QAAQ+B,QAyD/C,SAASoG,EAAkBtI,EAAIyI,GAC3BzI,EAAGG,QAAQuH,MAAM/D,MAAMgE,UAAYc,EAAQC,UAAY,KACvD1I,EAAGG,QAAQwI,aAAahF,MAAMC,IAAM6E,EAAQC,UAAY,KACxD1I,EAAGG,QAAQqH,QAAQ7D,MAAM8D,OAASgB,EAAQC,UAAY1I,EAAGG,QAAQyI,UAAY1J,EAAE2J,UAAU7I,GAAM,KAEnG,OACIF,cAAeA,EACfgJ,oBAjLJ,SAA6B9I,GACzB,IAAIG,EAAUH,EAAGG,SACZA,EAAQ4I,mBAAqB5I,EAAQ6I,SAAStI,cAC/CP,EAAQ8I,eAAiB9I,EAAQ6I,SAAStI,YAAcP,EAAQ6I,SAASlI,YACzEX,EAAQwI,aAAahF,MAAM8D,OAASvI,EAAE2J,UAAU7I,GAAM,KACtDG,EAAQuH,MAAM/D,MAAMuF,cAAgB/I,EAAQ8I,eAAiB,KAC7D9I,EAAQuH,MAAM/D,MAAMwF,iBAAmBjK,EAAE2J,UAAU7I,GAAM,KACzDG,EAAQ4I,mBAAoB,IA2KhCnH,sBAAuBA,EACvBiG,kBAAmBA,EACnBuB,oBAhEJ,SAA6BpJ,EAAIC,GAC7B,IAAI4B,EAAS,IAAI/B,EAAcE,EAAIC,GACnC,GAAI2B,EAAsB5B,EAAI6B,GAAS,CACnCjC,EAAEqI,wBAAwBjI,GAC1B6H,EAAkB7H,EAAI6B,GACtB,IAAIqG,EAAaxI,EAAEyI,qBAAqBnI,GACxCL,EAAEyI,gBAAgBpI,GAClBN,EAAE2I,iBAAiBrI,EAAIkI,GACvBI,EAAkBtI,EAAIkI,GACtBrG,EAAOwH,WAwDXC,kBAfJ,SAA2BtJ,GACvB,IAAIuJ,EAAQvJ,EAAGG,QAAQqH,QAAQ9G,YAC/BV,EAAGG,QAAQuH,MAAM/D,MAAM6F,WAAaD,EAAQ,MAc5CjB,kBAAmBA","file":"../../../primitives/display/update_display.js","sourcesContent":["define([\n    '../line/saw_special_spans',\n    '../line/spans',\n    '../line/utils_line',\n    '../measurement/position_measurement',\n    '../util/browser',\n    '../util/dom',\n    '../util/event',\n    '../util/misc',\n    './update_line',\n    './highlight_worker',\n    './line_numbers',\n    './scrollbars',\n    './selection',\n    './update_lines',\n    './view_tracking'\n], function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {\n    'use strict';\n    class DisplayUpdate {\n        constructor(cm, viewport, force) {\n            let display = cm.display;\n            this.viewport = viewport;\n            this.visible = n.visibleLines(display, cm.doc, viewport);\n            this.editorIsHidden = !display.wrapper.offsetWidth;\n            this.wrapperHeight = display.wrapper.clientHeight;\n            this.wrapperWidth = display.wrapper.clientWidth;\n            this.oldDisplayWidth = d.displayWidth(cm);\n            this.force = force;\n            this.dims = d.getDimensions(cm);\n            this.events = [];\n        }\n        signal(emitter, type) {\n            if (g.hasHandler(emitter, type))\n                this.events.push(arguments);\n        }\n        finish() {\n            for (let i = 0; i < this.events.length; i++)\n                g.signal.apply(null, this.events[i]);\n        }\n    }\n    function maybeClipScrollbars(cm) {\n        let display = cm.display;\n        if (!display.scrollbarsClipped && display.scroller.offsetWidth) {\n            display.nativeBarWidth = display.scroller.offsetWidth - display.scroller.clientWidth;\n            display.heightForcer.style.height = d.scrollGap(cm) + 'px';\n            display.sizer.style.marginBottom = -display.nativeBarWidth + 'px';\n            display.sizer.style.borderRightWidth = d.scrollGap(cm) + 'px';\n            display.scrollbarsClipped = true;\n        }\n    }\n    function selectionSnapshot(cm) {\n        if (cm.hasFocus())\n            return null;\n        let active = f.activeElt();\n        if (!active || !f.contains(cm.display.lineDiv, active))\n            return null;\n        let result = { activeElt: active };\n        if (window.getSelection) {\n            let sel = window.getSelection();\n            if (sel.anchorNode && sel.extend && f.contains(cm.display.lineDiv, sel.anchorNode)) {\n                result.anchorNode = sel.anchorNode;\n                result.anchorOffset = sel.anchorOffset;\n                result.focusNode = sel.focusNode;\n                result.focusOffset = sel.focusOffset;\n            }\n        }\n        return result;\n    }\n    function restoreSelection(snapshot) {\n        if (!snapshot || !snapshot.activeElt || snapshot.activeElt == f.activeElt())\n            return;\n        snapshot.activeElt.focus();\n        if (snapshot.anchorNode && f.contains(document.body, snapshot.anchorNode) && f.contains(document.body, snapshot.focusNode)) {\n            let sel = window.getSelection(), range = document.createRange();\n            range.setEnd(snapshot.anchorNode, snapshot.anchorOffset);\n            range.collapse(false);\n            sel.removeAllRanges();\n            sel.addRange(range);\n            sel.extend(snapshot.focusNode, snapshot.focusOffset);\n        }\n    }\n    function updateDisplayIfNeeded(cm, update) {\n        let display = cm.display, doc = cm.doc;\n        if (update.editorIsHidden) {\n            o.resetView(cm);\n            return false;\n        }\n        if (!update.force && update.visible.from >= display.viewFrom && update.visible.to <= display.viewTo && (display.updateLineNumbers == null || display.updateLineNumbers >= display.viewTo) && display.renderedView == display.view && o.countDirtyView(cm) == 0)\n            return false;\n        if (k.maybeUpdateLineNumberWidth(cm)) {\n            o.resetView(cm);\n            update.dims = d.getDimensions(cm);\n        }\n        let end = doc.first + doc.size;\n        let from = Math.max(update.visible.from - cm.options.viewportMargin, doc.first);\n        let to = Math.min(end, update.visible.to + cm.options.viewportMargin);\n        if (display.viewFrom < from && from - display.viewFrom < 20)\n            from = Math.max(doc.first, display.viewFrom);\n        if (display.viewTo > to && display.viewTo - to < 20)\n            to = Math.min(end, display.viewTo);\n        if (a.sawCollapsedSpans) {\n            from = b.visualLineNo(cm.doc, from);\n            to = b.visualLineEndNo(cm.doc, to);\n        }\n        let different = from != display.viewFrom || to != display.viewTo || display.lastWrapHeight != update.wrapperHeight || display.lastWrapWidth != update.wrapperWidth;\n        o.adjustView(cm, from, to);\n        display.viewOffset = b.heightAtLine(c.getLine(cm.doc, display.viewFrom));\n        cm.display.mover.style.top = display.viewOffset + 'px';\n        let toUpdate = o.countDirtyView(cm);\n        if (!different && toUpdate == 0 && !update.force && display.renderedView == display.view && (display.updateLineNumbers == null || display.updateLineNumbers >= display.viewTo))\n            return false;\n        let selSnapshot = selectionSnapshot(cm);\n        if (toUpdate > 4)\n            display.lineDiv.style.display = 'none';\n        patchDisplay(cm, display.updateLineNumbers, update.dims);\n        if (toUpdate > 4)\n            display.lineDiv.style.display = '';\n        display.renderedView = display.view;\n        restoreSelection(selSnapshot);\n        f.removeChildren(display.cursorDiv);\n        f.removeChildren(display.selectionDiv);\n        display.gutters.style.height = display.sizer.style.minHeight = 0;\n        if (different) {\n            display.lastWrapHeight = update.wrapperHeight;\n            display.lastWrapWidth = update.wrapperWidth;\n            j.startWorker(cm, 400);\n        }\n        display.updateLineNumbers = null;\n        return true;\n    }\n    function postUpdateDisplay(cm, update) {\n        let viewport = update.viewport;\n        for (let first = true;; first = false) {\n            if (!first || !cm.options.lineWrapping || update.oldDisplayWidth == d.displayWidth(cm)) {\n                if (viewport && viewport.top != null)\n                    viewport = { top: Math.min(cm.doc.height + d.paddingVert(cm.display) - d.displayHeight(cm), viewport.top) };\n                update.visible = n.visibleLines(cm.display, cm.doc, viewport);\n                if (update.visible.from >= cm.display.viewFrom && update.visible.to <= cm.display.viewTo)\n                    break;\n            }\n            if (!updateDisplayIfNeeded(cm, update))\n                break;\n            n.updateHeightsInViewport(cm);\n            let barMeasure = l.measureForScrollbars(cm);\n            m.updateSelection(cm);\n            l.updateScrollbars(cm, barMeasure);\n            setDocumentHeight(cm, barMeasure);\n            update.force = false;\n        }\n        update.signal(cm, 'update', cm);\n        if (cm.display.viewFrom != cm.display.reportedViewFrom || cm.display.viewTo != cm.display.reportedViewTo) {\n            update.signal(cm, 'viewportChange', cm, cm.display.viewFrom, cm.display.viewTo);\n            cm.display.reportedViewFrom = cm.display.viewFrom;\n            cm.display.reportedViewTo = cm.display.viewTo;\n        }\n    }\n    function updateDisplaySimple(cm, viewport) {\n        let update = new DisplayUpdate(cm, viewport);\n        if (updateDisplayIfNeeded(cm, update)) {\n            n.updateHeightsInViewport(cm);\n            postUpdateDisplay(cm, update);\n            let barMeasure = l.measureForScrollbars(cm);\n            m.updateSelection(cm);\n            l.updateScrollbars(cm, barMeasure);\n            setDocumentHeight(cm, barMeasure);\n            update.finish();\n        }\n    }\n    function patchDisplay(cm, updateNumbersFrom, dims) {\n        let display = cm.display, lineNumbers = cm.options.lineNumbers;\n        let container = display.lineDiv, cur = container.firstChild;\n        function rm(node) {\n            let next = node.nextSibling;\n            if (e.webkit && e.mac && cm.display.currentWheelTarget == node)\n                node.style.display = 'none';\n            else\n                node.parentNode.removeChild(node);\n            return next;\n        }\n        let view = display.view, lineN = display.viewFrom;\n        for (let i = 0; i < view.length; i++) {\n            let lineView = view[i];\n            if (lineView.hidden) {\n            } else if (!lineView.node || lineView.node.parentNode != container) {\n                let node = i.buildLineElement(cm, lineView, lineN, dims);\n                container.insertBefore(node, cur);\n            } else {\n                while (cur != lineView.node)\n                    cur = rm(cur);\n                let updateNumber = lineNumbers && updateNumbersFrom != null && updateNumbersFrom <= lineN && lineView.lineNumber;\n                if (lineView.changes) {\n                    if (h.indexOf(lineView.changes, 'gutter') > -1)\n                        updateNumber = false;\n                    i.updateLineForChanges(cm, lineView, lineN, dims);\n                }\n                if (updateNumber) {\n                    f.removeChildren(lineView.lineNumber);\n                    lineView.lineNumber.appendChild(document.createTextNode(c.lineNumberFor(cm.options, lineN)));\n                }\n                cur = lineView.node.nextSibling;\n            }\n            lineN += lineView.size;\n        }\n        while (cur)\n            cur = rm(cur);\n    }\n    function updateGutterSpace(cm) {\n        let width = cm.display.gutters.offsetWidth;\n        cm.display.sizer.style.marginLeft = width + 'px';\n    }\n    function setDocumentHeight(cm, measure) {\n        cm.display.sizer.style.minHeight = measure.docHeight + 'px';\n        cm.display.heightForcer.style.top = measure.docHeight + 'px';\n        cm.display.gutters.style.height = measure.docHeight + cm.display.barHeight + d.scrollGap(cm) + 'px';\n    }\n    return {\n        DisplayUpdate: DisplayUpdate,\n        maybeClipScrollbars: maybeClipScrollbars,\n        updateDisplayIfNeeded: updateDisplayIfNeeded,\n        postUpdateDisplay: postUpdateDisplay,\n        updateDisplaySimple: updateDisplaySimple,\n        updateGutterSpace: updateGutterSpace,\n        setDocumentHeight: setDocumentHeight\n    };\n});"]}