{"version":3,"sources":["primitives/display/scrollbars.js"],"names":["define","a","b","c","d","e","f","g","measureForScrollbars","cm","display","gutterW","gutters","offsetWidth","docH","Math","round","doc","height","paddingVert","clientHeight","scroller","viewHeight","wrapper","scrollWidth","clientWidth","viewWidth","barLeft","options","fixedGutter","docHeight","scrollHeight","scrollGap","barHeight","nativeBarWidth","gutterWidth","updateScrollbarsInner","measure","sizes","scrollbars","update","sizer","style","paddingRight","barWidth","right","paddingBottom","bottom","heightForcer","borderBottom","scrollbarFiller","width","coverGutterNextToScrollbar","gutterFiller","scrollbarModel","native","[object Object]","place","scroll","this","vert","elt","horiz","tabIndex","on","scrollTop","scrollLeft","checkedZeroWidth","ie","ie_version","minHeight","minWidth","needsH","needsV","sWidth","totalHeight","firstChild","max","left","totalWidth","zeroWidthHack","pos","disableHoriz","enableZeroWidthBar","disableVert","w","mac","mac_geMountainLion","pointerEvents","Delayed","bar","delay","type","set","maybeDisable","box","getBoundingClientRect","document","elementFromPoint","top","parent","parentNode","removeChild","null","updateScrollbars","startWidth","startHeight","i","lineWrapping","updateHeightsInViewport","initScrollbars","clear","undefined","rmClass","scrollbarStyle","node","insertBefore","state","focused","setTimeout","input","focus","setAttribute","axis","setScrollLeft","addClass"],"mappings":"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","file":"../../../primitives/display/scrollbars.js","sourcesContent":["define([\n    '../util/dom',\n    '../util/event',\n    '../measurement/position_measurement',\n    '../util/browser',\n    './update_lines',\n    '../util/misc',\n    './scrolling'\n], function (a, b, c, d, e, f, g) {\n    'use strict';\n    function measureForScrollbars(cm) {\n        let d = cm.display, gutterW = d.gutters.offsetWidth;\n        let docH = Math.round(cm.doc.height + c.paddingVert(cm.display));\n        return {\n            clientHeight: d.scroller.clientHeight,\n            viewHeight: d.wrapper.clientHeight,\n            scrollWidth: d.scroller.scrollWidth,\n            clientWidth: d.scroller.clientWidth,\n            viewWidth: d.wrapper.clientWidth,\n            barLeft: cm.options.fixedGutter ? gutterW : 0,\n            docHeight: docH,\n            scrollHeight: docH + c.scrollGap(cm) + d.barHeight,\n            nativeBarWidth: d.nativeBarWidth,\n            gutterWidth: gutterW\n        };\n    }\n    class NativeScrollbars {\n        constructor(place, scroll, cm) {\n            this.cm = cm;\n            let vert = this.vert = a.elt('div', [a.elt('div', null, null, 'min-width: 1px')], 'CodeMirror-vscrollbar');\n            let horiz = this.horiz = a.elt('div', [a.elt('div', null, null, 'height: 100%; min-height: 1px')], 'CodeMirror-hscrollbar');\n            vert.tabIndex = horiz.tabIndex = -1;\n            place(vert);\n            place(horiz);\n            b.on(vert, 'scroll', () => {\n                if (vert.clientHeight)\n                    scroll(vert.scrollTop, 'vertical');\n            });\n            b.on(horiz, 'scroll', () => {\n                if (horiz.clientWidth)\n                    scroll(horiz.scrollLeft, 'horizontal');\n            });\n            this.checkedZeroWidth = false;\n            if (d.ie && d.ie_version < 8)\n                this.horiz.style.minHeight = this.vert.style.minWidth = '18px';\n        }\n        update(measure) {\n            let needsH = measure.scrollWidth > measure.clientWidth + 1;\n            let needsV = measure.scrollHeight > measure.clientHeight + 1;\n            let sWidth = measure.nativeBarWidth;\n            if (needsV) {\n                this.vert.style.display = 'block';\n                this.vert.style.bottom = needsH ? sWidth + 'px' : '0';\n                let totalHeight = measure.viewHeight - (needsH ? sWidth : 0);\n                this.vert.firstChild.style.height = Math.max(0, measure.scrollHeight - measure.clientHeight + totalHeight) + 'px';\n            } else {\n                this.vert.style.display = '';\n                this.vert.firstChild.style.height = '0';\n            }\n            if (needsH) {\n                this.horiz.style.display = 'block';\n                this.horiz.style.right = needsV ? sWidth + 'px' : '0';\n                this.horiz.style.left = measure.barLeft + 'px';\n                let totalWidth = measure.viewWidth - measure.barLeft - (needsV ? sWidth : 0);\n                this.horiz.firstChild.style.width = Math.max(0, measure.scrollWidth - measure.clientWidth + totalWidth) + 'px';\n            } else {\n                this.horiz.style.display = '';\n                this.horiz.firstChild.style.width = '0';\n            }\n            if (!this.checkedZeroWidth && measure.clientHeight > 0) {\n                if (sWidth == 0)\n                    this.zeroWidthHack();\n                this.checkedZeroWidth = true;\n            }\n            return {\n                right: needsV ? sWidth : 0,\n                bottom: needsH ? sWidth : 0\n            };\n        }\n        setScrollLeft(pos) {\n            if (this.horiz.scrollLeft != pos)\n                this.horiz.scrollLeft = pos;\n            if (this.disableHoriz)\n                this.enableZeroWidthBar(this.horiz, this.disableHoriz, 'horiz');\n        }\n        setScrollTop(pos) {\n            if (this.vert.scrollTop != pos)\n                this.vert.scrollTop = pos;\n            if (this.disableVert)\n                this.enableZeroWidthBar(this.vert, this.disableVert, 'vert');\n        }\n        zeroWidthHack() {\n            let w = d.mac && !d.mac_geMountainLion ? '12px' : '18px';\n            this.horiz.style.height = this.vert.style.width = w;\n            this.horiz.style.pointerEvents = this.vert.style.pointerEvents = 'none';\n            this.disableHoriz = new f.Delayed();\n            this.disableVert = new f.Delayed();\n        }\n        enableZeroWidthBar(bar, delay, type) {\n            bar.style.pointerEvents = 'auto';\n            function maybeDisable() {\n                let box = bar.getBoundingClientRect();\n                let elt = type == 'vert' ? document.elementFromPoint(box.right - 1, (box.top + box.bottom) / 2) : document.elementFromPoint((box.right + box.left) / 2, box.bottom - 1);\n                if (elt != bar)\n                    bar.style.pointerEvents = 'none';\n                else\n                    delay.set(1000, maybeDisable);\n            }\n            delay.set(1000, maybeDisable);\n        }\n        clear() {\n            let parent = this.horiz.parentNode;\n            parent.removeChild(this.horiz);\n            parent.removeChild(this.vert);\n        }\n    }\n    class NullScrollbars {\n        update() {\n            return {\n                bottom: 0,\n                right: 0\n            };\n        }\n        setScrollLeft() {\n        }\n        setScrollTop() {\n        }\n        clear() {\n        }\n    }\n    function updateScrollbars(cm, measure) {\n        if (!measure)\n            measure = measureForScrollbars(cm);\n        let startWidth = cm.display.barWidth, startHeight = cm.display.barHeight;\n        updateScrollbarsInner(cm, measure);\n        for (let i = 0; i < 4 && startWidth != cm.display.barWidth || startHeight != cm.display.barHeight; i++) {\n            if (startWidth != cm.display.barWidth && cm.options.lineWrapping)\n                e.updateHeightsInViewport(cm);\n            updateScrollbarsInner(cm, measureForScrollbars(cm));\n            startWidth = cm.display.barWidth;\n            startHeight = cm.display.barHeight;\n        }\n    }\n    function updateScrollbarsInner(cm, measure) {\n        let d = cm.display;\n        let sizes = d.scrollbars.update(measure);\n        d.sizer.style.paddingRight = (d.barWidth = sizes.right) + 'px';\n        d.sizer.style.paddingBottom = (d.barHeight = sizes.bottom) + 'px';\n        d.heightForcer.style.borderBottom = sizes.bottom + 'px solid transparent';\n        if (sizes.right && sizes.bottom) {\n            d.scrollbarFiller.style.display = 'block';\n            d.scrollbarFiller.style.height = sizes.bottom + 'px';\n            d.scrollbarFiller.style.width = sizes.right + 'px';\n        } else\n            d.scrollbarFiller.style.display = '';\n        if (sizes.bottom && cm.options.coverGutterNextToScrollbar && cm.options.fixedGutter) {\n            d.gutterFiller.style.display = 'block';\n            d.gutterFiller.style.height = sizes.bottom + 'px';\n            d.gutterFiller.style.width = measure.gutterWidth + 'px';\n        } else\n            d.gutterFiller.style.display = '';\n    }\n    let scrollbarModel = {\n        'native': NativeScrollbars,\n        'null': NullScrollbars\n    };\n    function initScrollbars(cm) {\n        if (cm.display.scrollbars) {\n            cm.display.scrollbars.clear();\n            if (cm.display.scrollbars.undefined)\n                a.rmClass(cm.display.wrapper, cm.display.scrollbars.undefined);\n        }\n        cm.display.scrollbars = new scrollbarModel[cm.options.scrollbarStyle](node => {\n            cm.display.wrapper.insertBefore(node, cm.display.scrollbarFiller);\n            b.on(node, 'mousedown', () => {\n                if (cm.state.focused)\n                    setTimeout(() => cm.display.input.focus(), 0);\n            });\n            node.setAttribute('cm-not-content', 'true');\n        }, (pos, axis) => {\n            if (axis == 'horizontal')\n                g.setScrollLeft(cm, pos);\n            else\n                (cm, pos);\n        }, cm);\n        if (cm.display.scrollbars.undefined)\n            a.addClass(cm.display.wrapper, cm.display.scrollbars.undefined);\n    }\n    return {\n        measureForScrollbars: measureForScrollbars,\n        updateScrollbars: updateScrollbars,\n        scrollbarModel: scrollbarModel,\n        initScrollbars: initScrollbars\n    };\n});"]}