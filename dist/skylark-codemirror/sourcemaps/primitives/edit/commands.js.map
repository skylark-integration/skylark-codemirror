{"version":3,"sources":["primitives/edit/commands.js"],"names":["define","a","b","c","d","e","f","g","h","i","j","k","lineStart","cm","lineN","line","getLine","doc","visual","visualLine","lineNo","endOfLine","lineStartSmart","pos","start","order","getOrder","direction","level","firstNonWS","Math","max","text","search","inWS","ch","Pos","sticky","commands","selectAll","singleSelection","setSelection","getCursor","sel_dontScroll","killLine","deleteNearSelection","range","empty","len","head","length","lastLine","from","to","deleteLine","clipPos","delLineLeft","delWrappedLineLeft","top","charCoords","coordsChar","left","delWrappedLineRight","rightPos","display","lineDiv","offsetWidth","undo","redo","undoSelection","redoSelection","goDocStart","extendSelection","firstLine","goDocEnd","goLineStart","extendSelectionsBy","origin","bias","goLineStartSmart","goLineEnd","visualLineEnd","lineEnd","goLineRight","cursorCoords","sel_move","goLineLeft","goLineLeftSmart","undefined","goLineUp","moveV","goLineDown","goPageUp","goPageDown","goCharLeft","moveH","goCharRight","goColumnLeft","goColumnRight","goWordLeft","goGroupRight","goGroupLeft","goWordRight","delCharBefore","deleteH","delCharAfter","delWordBefore","delWordAfter","delGroupBefore","delGroupAfter","indentAuto","indentSelection","indentMore","indentLess","insertTab","replaceSelection","insertSoftTab","spaces","ranges","listSelections","tabSize","options","col","countColumn","push","spaceStr","replaceSelections","defaultTab","somethingSelected","execCommand","transposeChars","runInOp","newSel","cur","replaceRange","charAt","first","prev","lineSeparator","Range","setSelections","newlineAndIndent","sels","anchor","indentLine","ensureCursorVisible","openLine","toggleOverwrite"],"mappings":"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","file":"../../../primitives/edit/commands.js","sourcesContent":["define([\n    './deleteNearSelection',\n    '../display/operations',\n    '../display/scrolling',\n    '../input/movement',\n    '../line/pos',\n    '../line/spans',\n    '../line/utils_line',\n    '../model/selection',\n    '../model/selection_updates',\n    '../util/misc',\n    '../util/bidi'\n], function (a, b, c, d, e, f, g, h, i, j, k) {\n    'use strict';\n    let commands = {\n        selectAll: i.selectAll,\n        singleSelection: cm => cm.setSelection(cm.getCursor('anchor'), cm.getCursor('head'), j.sel_dontScroll),\n        killLine: cm => a.deleteNearSelection(cm, range => {\n            if (range.empty()) {\n                let len = g.getLine(cm.doc, range.head.line).text.length;\n                if (range.head.ch == len && range.head.line < cm.lastLine())\n                    return {\n                        from: range.head,\n                        to: e.Pos(range.head.line + 1, 0)\n                    };\n                else\n                    return {\n                        from: range.head,\n                        to: e.Pos(range.head.line, len)\n                    };\n            } else {\n                return {\n                    from: range.from(),\n                    to: range.to()\n                };\n            }\n        }),\n        deleteLine: cm => a.deleteNearSelection(cm, range => ({\n            from: e.Pos(range.from().line, 0),\n            to: e.clipPos(cm.doc, e.Pos(range.to().line + 1, 0))\n        })),\n        delLineLeft: cm => a.deleteNearSelection(cm, range => ({\n            from: e.Pos(range.from().line, 0),\n            to: range.from()\n        })),\n        delWrappedLineLeft: cm => a.deleteNearSelection(cm, range => {\n            let top = cm.charCoords(range.head, 'div').top + 5;\n            let leftPos = cm.coordsChar({\n                left: 0,\n                top: top\n            }, 'div');\n            return {\n                from: leftPos,\n                to: range.from()\n            };\n        }),\n        delWrappedLineRight: cm => a.deleteNearSelection(cm, range => {\n            let top = cm.charCoords(range.head, 'div').top + 5;\n            let rightPos = cm.coordsChar({\n                left: cm.display.lineDiv.offsetWidth + 100,\n                top: top\n            }, 'div');\n            return {\n                from: range.from(),\n                to: rightPos\n            };\n        }),\n        undo: cm => cm.undo(),\n        redo: cm => cm.redo(),\n        undoSelection: cm => cm.undoSelection(),\n        redoSelection: cm => cm.redoSelection(),\n        goDocStart: cm => cm.extendSelection(e.Pos(cm.firstLine(), 0)),\n        goDocEnd: cm => cm.extendSelection(e.Pos(cm.lastLine())),\n        goLineStart: cm => cm.extendSelectionsBy(range => lineStart(cm, range.head.line), {\n            origin: '+move',\n            bias: 1\n        }),\n        goLineStartSmart: cm => cm.extendSelectionsBy(range => lineStartSmart(cm, range.head), {\n            origin: '+move',\n            bias: 1\n        }),\n        goLineEnd: cm => cm.extendSelectionsBy(range => lineEnd(cm, range.head.line), {\n            origin: '+move',\n            bias: -1\n        }),\n        goLineRight: cm => cm.extendSelectionsBy(range => {\n            let top = cm.cursorCoords(range.head, 'div').top + 5;\n            return cm.coordsChar({\n                left: cm.display.lineDiv.offsetWidth + 100,\n                top: top\n            }, 'div');\n        }, j.sel_move),\n        goLineLeft: cm => cm.extendSelectionsBy(range => {\n            let top = cm.cursorCoords(range.head, 'div').top + 5;\n            return cm.coordsChar({\n                left: 0,\n                top: top\n            }, 'div');\n        }, j.sel_move),\n        goLineLeftSmart: cm => cm.extendSelectionsBy(range => {\n            let top = cm.cursorCoords(range.head, 'div').top + 5;\n            let pos = cm.coordsChar({\n                left: 0,\n                top: top\n            }, 'div');\n            if (pos.ch < cm.undefined(pos.line).search(/\\S/))\n                return lineStartSmart(cm, range.head);\n            return pos;\n        }, j.sel_move),\n        goLineUp: cm => cm.moveV(-1, 'line'),\n        goLineDown: cm => cm.moveV(1, 'line'),\n        goPageUp: cm => cm.moveV(-1, 'page'),\n        goPageDown: cm => cm.moveV(1, 'page'),\n        goCharLeft: cm => cm.moveH(-1, 'char'),\n        goCharRight: cm => cm.moveH(1, 'char'),\n        goColumnLeft: cm => cm.moveH(-1, 'column'),\n        goColumnRight: cm => cm.moveH(1, 'column'),\n        goWordLeft: cm => cm.moveH(-1, 'word'),\n        goGroupRight: cm => cm.moveH(1, 'group'),\n        goGroupLeft: cm => cm.moveH(-1, 'group'),\n        goWordRight: cm => cm.moveH(1, 'word'),\n        delCharBefore: cm => cm.deleteH(-1, 'char'),\n        delCharAfter: cm => cm.deleteH(1, 'char'),\n        delWordBefore: cm => cm.deleteH(-1, 'word'),\n        delWordAfter: cm => cm.deleteH(1, 'word'),\n        delGroupBefore: cm => cm.deleteH(-1, 'group'),\n        delGroupAfter: cm => cm.deleteH(1, 'group'),\n        indentAuto: cm => cm.indentSelection('smart'),\n        indentMore: cm => cm.indentSelection('add'),\n        indentLess: cm => cm.indentSelection('subtract'),\n        insertTab: cm => cm.replaceSelection('\\t'),\n        insertSoftTab: cm => {\n            let spaces = [], ranges = cm.listSelections(), tabSize = cm.options.tabSize;\n            for (let i = 0; i < ranges.length; i++) {\n                let pos = ranges[i].from();\n                let col = j.countColumn(cm.undefined(pos.line), pos.ch, tabSize);\n                spaces.push(j.spaceStr(tabSize - col % tabSize));\n            }\n            cm.replaceSelections(spaces);\n        },\n        defaultTab: cm => {\n            if (cm.somethingSelected())\n                cm.indentSelection('add');\n            else\n                cm.execCommand('insertTab');\n        },\n        transposeChars: cm => b.runInOp(cm, () => {\n            let ranges = cm.listSelections(), newSel = [];\n            for (let i = 0; i < ranges.length; i++) {\n                if (!ranges[i].empty())\n                    continue;\n                let cur = ranges[i].head, line = g.getLine(cm.doc, cur.line).text;\n                if (line) {\n                    if (cur.ch == line.length)\n                        cur = new e.Pos(cur.line, cur.ch - 1);\n                    if (cur.ch > 0) {\n                        cur = new e.Pos(cur.line, cur.ch + 1);\n                        cm.replaceRange(line.charAt(cur.ch - 1) + line.charAt(cur.ch - 2), e.Pos(cur.line, cur.ch - 2), cur, '+transpose');\n                    } else if (cur.line > cm.doc.first) {\n                        let prev = g.getLine(cm.doc, cur.line - 1).text;\n                        if (prev) {\n                            cur = new e.Pos(cur.line, 1);\n                            cm.replaceRange(line.charAt(0) + cm.doc.lineSeparator() + prev.charAt(prev.length - 1), e.Pos(cur.line - 1, prev.length - 1), cur, '+transpose');\n                        }\n                    }\n                }\n                newSel.push(new h.Range(cur, cur));\n            }\n            cm.setSelections(newSel);\n        }),\n        newlineAndIndent: cm => b.runInOp(cm, () => {\n            let sels = cm.listSelections();\n            for (let i = sels.length - 1; i >= 0; i--)\n                cm.replaceRange(cm.doc.lineSeparator(), sels[i].anchor, sels[i].head, '+input');\n            sels = cm.listSelections();\n            for (let i = 0; i < sels.length; i++)\n                cm.indentLine(sels[i].from().line, null, true);\n            c.ensureCursorVisible(cm);\n        }),\n        openLine: cm => cm.replaceSelection('\\n', 'start'),\n        toggleOverwrite: cm => cm.toggleOverwrite()\n    };\n    function lineStart(cm, lineN) {\n        let line = g.getLine(cm.doc, lineN);\n        let visual = f.visualLine(line);\n        if (visual != line)\n            lineN = g.lineNo(visual);\n        return d.endOfLine(true, cm, visual, lineN, 1);\n    }\n    function lineEnd(cm, lineN) {\n        let line = g.getLine(cm.doc, lineN);\n        let visual = f.visualLineEnd(line);\n        if (visual != line)\n            lineN = g.lineNo(visual);\n        return d.endOfLine(true, cm, line, lineN, -1);\n    }\n    function lineStartSmart(cm, pos) {\n        let start = lineStart(cm, pos.line);\n        let line = g.getLine(cm.doc, start.line);\n        let order = k.getOrder(line, cm.doc.direction);\n        if (!order || order[0].level == 0) {\n            let firstNonWS = Math.max(0, line.text.search(/\\S/));\n            let inWS = pos.line == start.line && pos.ch <= firstNonWS && pos.ch;\n            return e.Pos(start.line, inWS ? 0 : firstNonWS, start.sticky);\n        }\n        return start;\n    }\n    return { commands: commands };\n});"]}