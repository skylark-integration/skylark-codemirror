{"version":3,"sources":["primitives/display/update_lines.js"],"names":["define","spans","utils_line","c","browser","updateWidgetHeight","line","widgets","i","length","w","parent","node","parentNode","height","offsetHeight","updateHeightsInViewport","cm","display","prevBottom","lineDiv","offsetTop","view","cur","wrapping","options","lineWrapping","width","hidden","ie","ie_version","bot","box","getBoundingClientRect","bottom","top","text","firstChild","right","left","diff","updateLineHeight","rest","j","sizerWidth","chWidth","Math","ceil","position_measurement","charWidth","maxLineLength","maxLine","maxLineChanged","visibleLines","doc","viewport","max","scroller","scrollTop","floor","paddingTop","wrapper","clientHeight","from","lineAtHeight","to","ensure","ensureFrom","ensureTo","heightAtLine","getLine","min","lastLine"],"mappings":";;;;;;;AAAAA,QACI,gBACA,qBACA,sCACA,mBACD,SAAUC,EAAOC,EAAYC,EAAGC,GAC/B,aAqCA,SAASC,EAAmBC,GACxB,GAAIA,EAAKC,QACL,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAKC,QAAQE,SAAUD,EAAG,CAC1C,IAAIE,EAAIJ,EAAKC,QAAQC,GAAIG,EAASD,EAAEE,KAAKC,WACrCF,IACAD,EAAEI,OAASH,EAAOI,eAuBlC,OACIC,wBAjEJ,SAAiCC,GAC7B,IAAIC,EAAUD,EAAGC,QACbC,EAAaD,EAAQE,QAAQC,UACjC,IAAK,IAAIb,EAAI,EAAGA,EAAIU,EAAQI,KAAKb,OAAQD,IAAK,CAC1C,IACIM,EADAS,EAAML,EAAQI,KAAKd,GAAIgB,EAAWP,EAAGQ,QAAQC,aACrCC,EAAQ,EACpB,GAAIJ,EAAIK,OACJ,SACJ,GAAIxB,EAAQyB,IAAMzB,EAAQ0B,WAAa,EAAG,CACtC,IAAIC,EAAMR,EAAIX,KAAKS,UAAYE,EAAIX,KAAKG,aACxCD,EAASiB,EAAMZ,EACfA,EAAaY,MACV,CACH,IAAIC,EAAMT,EAAIX,KAAKqB,wBACnBnB,EAASkB,EAAIE,OAASF,EAAIG,KACrBX,GAAYD,EAAIa,KAAKC,aACtBV,EAAQJ,EAAIa,KAAKC,WAAWJ,wBAAwBK,MAAQN,EAAIO,KAAO,GAE/E,IAAIC,EAAOjB,EAAIjB,KAAKQ,OAASA,EAC7B,IAAI0B,EAAO,MAASA,GAAQ,QACxBtC,EAAWuC,iBAAiBlB,EAAIjB,KAAMQ,GACtCT,EAAmBkB,EAAIjB,MACnBiB,EAAImB,MACJ,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,EAAImB,KAAKjC,OAAQkC,IACjCtC,EAAmBkB,EAAImB,KAAKC,IAExC,GAAIhB,EAAQV,EAAGC,QAAQ0B,WAAY,CAC/B,IAAIC,EAAUC,KAAKC,KAAKpB,EAAQqB,qBAAqBC,UAAUhC,EAAGC,UAC9D2B,EAAU5B,EAAGC,QAAQgC,gBACrBjC,EAAGC,QAAQgC,cAAgBL,EAC3B5B,EAAGC,QAAQiC,QAAU5B,EAAIjB,KACzBW,EAAGC,QAAQkC,gBAAiB,MAmCxCC,aAtBJ,SAAsBnC,EAASoC,EAAKC,GAChC,IAAIpB,EAAMoB,GAA4B,MAAhBA,EAASpB,IAAcW,KAAKU,IAAI,EAAGD,EAASpB,KAAOjB,EAAQuC,SAASC,UAC1FvB,EAAMW,KAAKa,MAAMxB,EAAMa,qBAAqBY,WAAW1C,IACvD,IAAIgB,EAASqB,GAA+B,MAAnBA,EAASrB,OAAiBqB,EAASrB,OAASC,EAAMjB,EAAQ2C,QAAQC,aACvFC,EAAO7D,EAAW8D,aAAaV,EAAKnB,GAAM8B,EAAK/D,EAAW8D,aAAaV,EAAKpB,GAChF,GAAIqB,GAAYA,EAASW,OAAQ,CAC7B,IAAIC,EAAaZ,EAASW,OAAOH,KAAKzD,KAAM8D,EAAWb,EAASW,OAAOD,GAAG3D,KACtE6D,EAAaJ,GACbA,EAAOI,EACPF,EAAK/D,EAAW8D,aAAaV,EAAKrD,EAAMoE,aAAanE,EAAWoE,QAAQhB,EAAKa,IAAejD,EAAQ2C,QAAQC,eACrGhB,KAAKyB,IAAIH,EAAUd,EAAIkB,aAAeP,IAC7CF,EAAO7D,EAAW8D,aAAaV,EAAKrD,EAAMoE,aAAanE,EAAWoE,QAAQhB,EAAKc,IAAalD,EAAQ2C,QAAQC,cAC5GG,EAAKG,GAGb,OACIL,KAAMA,EACNE,GAAInB,KAAKU,IAAIS,EAAIF,EAAO","file":"../../../primitives/display/update_lines.js","sourcesContent":["define([\n    '../line/spans',\n    '../line/utils_line',\n    '../measurement/position_measurement',\n    '../util/browser'\n], function (spans, utils_line, c, browser) {\n    'use strict';\n    function updateHeightsInViewport(cm) {\n        let display = cm.display;\n        let prevBottom = display.lineDiv.offsetTop;\n        for (let i = 0; i < display.view.length; i++) {\n            let cur = display.view[i], wrapping = cm.options.lineWrapping;\n            let height, width = 0;\n            if (cur.hidden)\n                continue;\n            if (browser.ie && browser.ie_version < 8) {\n                let bot = cur.node.offsetTop + cur.node.offsetHeight;\n                height = bot - prevBottom;\n                prevBottom = bot;\n            } else {\n                let box = cur.node.getBoundingClientRect();\n                height = box.bottom - box.top;\n                if (!wrapping && cur.text.firstChild)\n                    width = cur.text.firstChild.getBoundingClientRect().right - box.left - 1;\n            }\n            let diff = cur.line.height - height;\n            if (diff > 0.005 || diff < -0.005) {\n                utils_line.updateLineHeight(cur.line, height);\n                updateWidgetHeight(cur.line);\n                if (cur.rest)\n                    for (let j = 0; j < cur.rest.length; j++)\n                        updateWidgetHeight(cur.rest[j]);\n            }\n            if (width > cm.display.sizerWidth) {\n                let chWidth = Math.ceil(width / position_measurement.charWidth(cm.display));\n                if (chWidth > cm.display.maxLineLength) {\n                    cm.display.maxLineLength = chWidth;\n                    cm.display.maxLine = cur.line;\n                    cm.display.maxLineChanged = true;\n                }\n            }\n        }\n    }\n    function updateWidgetHeight(line) {\n        if (line.widgets)\n            for (let i = 0; i < line.widgets.length; ++i) {\n                let w = line.widgets[i], parent = w.node.parentNode;\n                if (parent)\n                    w.height = parent.offsetHeight;\n            }\n    }\n    function visibleLines(display, doc, viewport) {\n        let top = viewport && viewport.top != null ? Math.max(0, viewport.top) : display.scroller.scrollTop;\n        top = Math.floor(top - position_measurement.paddingTop(display));\n        let bottom = viewport && viewport.bottom != null ? viewport.bottom : top + display.wrapper.clientHeight;\n        let from = utils_line.lineAtHeight(doc, top), to = utils_line.lineAtHeight(doc, bottom);\n        if (viewport && viewport.ensure) {\n            let ensureFrom = viewport.ensure.from.line, ensureTo = viewport.ensure.to.line;\n            if (ensureFrom < from) {\n                from = ensureFrom;\n                to = utils_line.lineAtHeight(doc, spans.heightAtLine(utils_line.getLine(doc, ensureFrom)) + display.wrapper.clientHeight);\n            } else if (Math.min(ensureTo, doc.lastLine()) >= to) {\n                from = utils_line.lineAtHeight(doc, spans.heightAtLine(utils_line.getLine(doc, ensureTo)) - display.wrapper.clientHeight);\n                to = ensureTo;\n            }\n        }\n        return {\n            from: from,\n            to: Math.max(to, from + 1)\n        };\n    }\n    return {\n        updateHeightsInViewport: updateHeightsInViewport,\n        visibleLines: visibleLines\n    };\n});"]}