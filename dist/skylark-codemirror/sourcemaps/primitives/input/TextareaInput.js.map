{"version":3,"sources":["primitives/input/TextareaInput.js"],"names":["define","operations","display_selection","inputs","position_measurement","widgets","model_selection","selection_updates","browser","dom","event","feature_detection","misc","TextareaInput","[object Object]","cm","this","prevInput","pollingFast","polling","Delayed","hasSelection","composing","display","input","createField","te","textarea","prepareCopyCut","e","signalDOMEvent","somethingSelected","setLastCopied","lineWise","text","getSelections","options","lineWiseCopyCut","ranges","copyableRanges","type","setSelections","sel_dontScroll","value","join","selectInput","state","cutIncoming","Date","wrapper","insertBefore","firstChild","ios","style","width","on","ie","ie_version","poll","handlePaste","pasteIncoming","fastPoll","scroller","eventInWidget","dispatchEvent","focus","Event","clipboardData","lineSpace","e_preventDefault","start","getCursor","range","clear","markText","className","_display","hiddenTextarea","doc","result","prepareSelection","moveInputWithCursor","headPos","cursorCoords","sel","primary","head","wrapOff","getBoundingClientRect","lineOff","lineDiv","teTop","Math","max","min","clientHeight","top","teLeft","clientWidth","left","drawn","removeChildrenAndAdd","cursorDiv","cursors","selectionDiv","selection","typing","contextMenuPending","content","getSelection","focused","readOnly","mobile","activeElt","blur","slowPoll","set","pollInterval","missed","p","isReadOnly","disableInput","keySeq","mac","test","reset","selForContextMenu","first","charCodeAt","execCommand","same","l","length","runInOp","applyTextInput","slice","indexOf","pos","posFromMouse","scrollPos","scrollTop","presto","resetSelectionOnContextMenu","contains","operation","setSelection","simpleSelection","oldScrollY","oldCSS","cssText","oldWrapperCSS","wrapperBox","offsetParent","prepareSelectAllHack","selectionStart","selected","extval","selectionEnd","rehide","scrollbars","setScrollTop","i","selectAll","detectingSelectAll","setTimeout","clientY","clientX","webkit","window","scrollY","scrollTo","clearTimeout","captureRightClick","e_stop","mouseup","off","val","disabled","prototype","needsContentAttribute"],"mappings":"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","file":"../../../primitives/input/TextareaInput.js","sourcesContent":["define([\n    '../display/operations',\n    '../display/selection',\n    './input',\n    '../measurement/position_measurement',\n    '../measurement/widgets',\n    '../model/selection',\n    '../model/selection_updates',\n    '../util/browser',\n    '../util/dom',\n    '../util/event',\n    '../util/feature_detection',\n    '../util/misc'\n], function (operations, display_selection, inputs, position_measurement, widgets, model_selection, selection_updates, browser, dom, event, feature_detection, misc) {\n    'use strict';\n    class TextareaInput {\n        constructor(cm) {\n            this.cm = cm;\n            this.prevInput = '';\n            this.pollingFast = false;\n            this.polling = new misc.Delayed();\n            this.hasSelection = false;\n            this.composing = null;\n        }\n        init(display) {\n            let input = this, cm = this.cm;\n            this.createField(display);\n            const te = this.textarea;\n            display.wrapper.insertBefore(this.wrapper, display.wrapper.firstChild);\n            if (browser.ios)\n                te.style.width = '0px';\n            event.on(te, 'input', () => {\n                if (browser.ie && browser.ie_version >= 9 && this.hasSelection)\n                    this.hasSelection = null;\n                input.poll();\n            });\n            event.on(te, 'paste', e => {\n                if (event.signalDOMEvent(cm, e) || inputs.handlePaste(e, cm))\n                    return;\n                cm.state.pasteIncoming = +new Date();\n                input.fastPoll();\n            });\n            function prepareCopyCut(e) {\n                if (event.signalDOMEvent(cm, e))\n                    return;\n                if (cm.somethingSelected()) {\n                    inputs.setLastCopied({\n                        lineWise: false,\n                        text: cm.getSelections()\n                    });\n                } else if (!cm.options.lineWiseCopyCut) {\n                    return;\n                } else {\n                    let ranges = inputs.copyableRanges(cm);\n                    inputs.setLastCopied({\n                        lineWise: true,\n                        text: ranges.text\n                    });\n                    if (e.type == 'cut') {\n                        cm.setSelections(ranges.ranges, null, misc.sel_dontScroll);\n                    } else {\n                        input.prevInput = '';\n                        te.value = ranges.text.join('\\n');\n                        dom.selectInput(te);\n                    }\n                }\n                if (e.type == 'cut')\n                    cm.state.cutIncoming = +new Date();\n            }\n            event.on(te, 'cut', prepareCopyCut);\n            event.on(te, 'copy', prepareCopyCut);\n            event.on(display.scroller, 'paste', e => {\n                if (widgets.eventInWidget(display, e) || event.signalDOMEvent(cm, e))\n                    return;\n                if (!te.dispatchEvent) {\n                    cm.state.pasteIncoming = +new Date();\n                    input.focus();\n                    return;\n                }\n                const event = new Event('paste');\n                event.clipboardData = e.clipboardData;\n                te.dispatchEvent(event);\n            });\n            event.on(display.lineSpace, 'selectstart', e => {\n                if (!widgets.eventInWidget(display, e))\n                    event.e_preventDefault(e);\n            });\n            event.on(te, 'compositionstart', () => {\n                let start = cm.getCursor('from');\n                if (input.composing)\n                    input.composing.range.clear();\n                input.composing = {\n                    start: start,\n                    range: cm.markText(start, cm.getCursor('to'), { className: 'CodeMirror-composing' })\n                };\n            });\n            event.on(te, 'compositionend', () => {\n                if (input.composing) {\n                    input.poll();\n                    input.composing.range.clear();\n                    input.composing = null;\n                }\n            });\n        }\n        createField(_display) {\n            this.wrapper = inputs.hiddenTextarea();\n            this.textarea = this.wrapper.firstChild;\n        }\n        prepareSelection() {\n            let cm = this.cm, display = cm.display, doc = cm.doc;\n            let result = display_selection.prepareSelection(cm);\n            if (cm.options.moveInputWithCursor) {\n                let headPos = position_measurement.cursorCoords(cm, doc.sel.primary().head, 'div');\n                let wrapOff = display.wrapper.getBoundingClientRect(), lineOff = display.lineDiv.getBoundingClientRect();\n                result.teTop = Math.max(0, Math.min(display.wrapper.clientHeight - 10, headPos.top + lineOff.top - wrapOff.top));\n                result.teLeft = Math.max(0, Math.min(display.wrapper.clientWidth - 10, headPos.left + lineOff.left - wrapOff.left));\n            }\n            return result;\n        }\n        showSelection(drawn) {\n            let cm = this.cm, display = cm.display;\n            dom.removeChildrenAndAdd(display.cursorDiv, drawn.cursors);\n            dom.removeChildrenAndAdd(display.selectionDiv, drawn.selection);\n            if (drawn.teTop != null) {\n                this.wrapper.style.top = drawn.teTop + 'px';\n                this.wrapper.style.left = drawn.teLeft + 'px';\n            }\n        }\n        reset(typing) {\n            if (this.contextMenuPending || this.composing)\n                return;\n            let cm = this.cm;\n            if (cm.somethingSelected()) {\n                this.prevInput = '';\n                let content = cm.getSelection();\n                this.textarea.value = content;\n                if (cm.state.focused)\n                    dom.selectInput(this.textarea);\n                if (browser.ie && browser.ie_version >= 9)\n                    this.hasSelection = content;\n            } else if (!typing) {\n                this.prevInput = this.textarea.value = '';\n                if (browser.ie && browser.ie_version >= 9)\n                    this.hasSelection = null;\n            }\n        }\n        getField() {\n            return this.textarea;\n        }\n        supportsTouch() {\n            return false;\n        }\n        focus() {\n            if (this.cm.options.readOnly != 'nocursor' && (!browser.mobile || dom.activeElt() != this.textarea)) {\n                try {\n                    this.textarea.focus();\n                } catch (e) {\n                }\n            }\n        }\n        blur() {\n            this.textarea.blur();\n        }\n        resetPosition() {\n            this.wrapper.style.top = this.wrapper.style.left = 0;\n        }\n        receivedFocus() {\n            this.slowPoll();\n        }\n        slowPoll() {\n            if (this.pollingFast)\n                return;\n            this.polling.set(this.cm.options.pollInterval, () => {\n                this.poll();\n                if (this.cm.state.focused)\n                    this.slowPoll();\n            });\n        }\n        fastPoll() {\n            let missed = false, input = this;\n            input.pollingFast = true;\n            function p() {\n                let changed = input.poll();\n                if (!changed && !missed) {\n                    missed = true;\n                    input.polling.set(60, p);\n                } else {\n                    input.pollingFast = false;\n                    input.slowPoll();\n                }\n            }\n            input.polling.set(20, p);\n        }\n        poll() {\n            let cm = this.cm, input = this.textarea, prevInput = this.prevInput;\n            if (this.contextMenuPending || !cm.state.focused || feature_detection.hasSelection(input) && !prevInput && !this.composing || cm.isReadOnly() || cm.options.disableInput || cm.state.keySeq)\n                return false;\n            let text = input.value;\n            if (text == prevInput && !cm.somethingSelected())\n                return false;\n            if (browser.ie && browser.ie_version >= 9 && this.hasSelection === text || browser.mac && /[\\uf700-\\uf7ff]/.test(text)) {\n                cm.display.input.reset();\n                return false;\n            }\n            if (cm.doc.sel == cm.display.selForContextMenu) {\n                let first = text.charCodeAt(0);\n                if (first == 8203 && !prevInput)\n                    prevInput = '\\u200B';\n                if (first == 8666) {\n                    this.reset();\n                    return this.cm.execCommand('undo');\n                }\n            }\n            let same = 0, l = Math.min(prevInput.length, text.length);\n            while (same < l && prevInput.charCodeAt(same) == text.charCodeAt(same))\n                ++same;\n            operations.runInOp(cm, () => {\n                inputs.applyTextInput(cm, text.slice(same), prevInput.length - same, null, this.composing ? '*compose' : null);\n                if (text.length > 1000 || text.indexOf('\\n') > -1)\n                    input.value = this.prevInput = '';\n                else\n                    this.prevInput = text;\n                if (this.composing) {\n                    this.composing.range.clear();\n                    this.composing.range = cm.markText(this.composing.start, cm.getCursor('to'), { className: 'CodeMirror-composing' });\n                }\n            });\n            return true;\n        }\n        ensurePolled() {\n            if (this.pollingFast && this.poll())\n                this.pollingFast = false;\n        }\n        onKeyPress() {\n            if (browser.ie && browser.ie_version >= 9)\n                this.hasSelection = null;\n            this.fastPoll();\n        }\n        onContextMenu(e) {\n            let input = this, cm = input.cm, display = cm.display, te = input.textarea;\n            if (input.contextMenuPending)\n                input.contextMenuPending();\n            let pos = position_measurement.posFromMouse(cm, e), scrollPos = display.scroller.scrollTop;\n            if (!pos || browser.presto)\n                return;\n            let reset = cm.options.resetSelectionOnContextMenu;\n            if (reset && cm.doc.sel.contains(pos) == -1)\n                operations.operation(cm, selection_updates.setSelection)(cm.doc, model_selection.simpleSelection(pos), misc.sel_dontScroll);\n            let oldCSS = te.style.cssText, oldWrapperCSS = input.wrapper.style.cssText;\n            let wrapperBox = input.wrapper.offsetParent.getBoundingClientRect();\n            input.wrapper.style.cssText = 'position: static';\n            te.style.cssText = `position: absolute; width: 30px; height: 30px;\n      top: ${ e.clientY - wrapperBox.top - 5 }px; left: ${ e.clientX - wrapperBox.left - 5 }px;\n      z-index: 1000; background: ${ browser.ie ? 'rgba(255, 255, 255, .05)' : 'transparent' };\n      outline: none; border-width: 0; outline: none; overflow: hidden; opacity: .05; filter: alpha(opacity=5);`;\n            let oldScrollY;\n            if (browser.webkit)\n                oldScrollY = window.scrollY;\n            display.input.focus();\n            if (browser.webkit)\n                window.scrollTo(null, oldScrollY);\n            display.input.reset();\n            if (!cm.somethingSelected())\n                te.value = input.prevInput = ' ';\n            input.contextMenuPending = rehide;\n            display.selForContextMenu = cm.doc.sel;\n            clearTimeout(display.detectingSelectAll);\n            function prepareSelectAllHack() {\n                if (te.selectionStart != null) {\n                    let selected = cm.somethingSelected();\n                    let extval = '\\u200B' + (selected ? te.value : '');\n                    te.value = '\\u21DA';\n                    te.value = extval;\n                    input.prevInput = selected ? '' : '\\u200B';\n                    te.selectionStart = 1;\n                    te.selectionEnd = extval.length;\n                    display.selForContextMenu = cm.doc.sel;\n                }\n            }\n            function rehide() {\n                if (input.contextMenuPending != rehide)\n                    return;\n                input.contextMenuPending = false;\n                input.wrapper.style.cssText = oldWrapperCSS;\n                te.style.cssText = oldCSS;\n                if (browser.ie && browser.ie_version < 9)\n                    display.scrollbars.setScrollTop(display.scroller.scrollTop = scrollPos);\n                if (te.selectionStart != null) {\n                    if (!browser.ie || browser.ie && browser.ie_version < 9)\n                        prepareSelectAllHack();\n                    let i = 0, poll = () => {\n                            if (display.selForContextMenu == cm.doc.sel && te.selectionStart == 0 && te.selectionEnd > 0 && input.prevInput == '\\u200B') {\n                                operations.operation(cm, selection_updates.selectAll)(cm);\n                            } else if (i++ < 10) {\n                                display.detectingSelectAll = setTimeout(poll, 500);\n                            } else {\n                                display.selForContextMenu = null;\n                                display.input.reset();\n                            }\n                        };\n                    display.detectingSelectAll = setTimeout(poll, 200);\n                }\n            }\n            if (browser.ie && browser.ie_version >= 9)\n                prepareSelectAllHack();\n            if (browser.captureRightClick) {\n                event.e_stop(e);\n                let mouseup = () => {\n                    event.off(window, 'mouseup', mouseup);\n                    setTimeout(rehide, 20);\n                };\n                event.on(window, 'mouseup', mouseup);\n            } else {\n                setTimeout(rehide, 50);\n            }\n        }\n        readOnlyChanged(val) {\n            if (!val)\n                this.reset();\n            this.textarea.disabled = val == 'nocursor';\n        }\n        setUneditable() {\n        }\n    };\n    TextareaInput.prototype.needsContentAttribute = false;\n\n    return TextareaInput;\n\n});"]}